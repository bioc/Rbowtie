name: R-CMD-check

on: push

jobs:
  build:

    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: macOS-latest, bioc: 'devel', covr: 'yes', pkgdown: 'yes'}
        - { os: windows-latest, bioc: 'devel'}
        #- { os: windows-latest, r: '3.6', bioc: 'devel', args: "--no-manual"}
        #- { os: windows-latest, r: 'devel', bioc: 'devel', args: "--no-manual"}
        #- { os: windows-latest, r: 'release', bioc: 'devel', args: "--no-manual"}
        #- { os: windows-latest, r: 'devel', bioc: 'devel', args: "--no-manual"}
        #- { os: macOS-latest, r: 'devel', bioc: 'devel'}
        #- { os: macOS-latest, r: 'release', bioc: 'devel', args: "--no-manual"}
        #- { os: macOS-latest, r: 'devel', bioc: 'devel', args: "--no-manual"}
        #- { os: ubuntu-18.04, r: '3.6', bioc: 'devel', cran: "https://demo.rstudiopm.com/all/__linux__/bionic/latest", args: "--no-manual" }
        #- { os: ubuntu-16.04, r: 'devel', bioc: 'devel', cran: "https://demo.rstudiopm.com/all/__linux__/xenial/latest", args: "--no-manual" }
        #- { os: ubuntu-18.04, r: 'devel', bioc: 'devel', cran: "https://demo.rstudiopm.com/all/__linux__/bionic/latest", args: "--no-manual" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: checkout branch
      uses: actions/checkout@v2
      
    - name: Set up R and install BiocManager
      uses: grimbough/bioc-actions/setup-bioc@v1
      if: matrix.config.image == null
      with:
        bioc-version: ${{ matrix.config.bioc }}

    - name: Set up pandoc
      uses: r-lib/actions/setup-pandoc@v2
      if: matrix.config.image == null

    - name: Install remotes
      run: |
        install.packages('remotes')
      shell: Rscript {0}

    - name: Query dependencies
      run: |
        saveRDS(remotes::dev_package_deps(dependencies = TRUE, repos = c(getOption('repos'), BiocManager::repositories())), 'depends.Rds', version = 2)
      shell: Rscript {0}

    - name: Cache R packages
      if: runner.os != 'Windows' && matrix.config.image == null
      uses: actions/cache@v1
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}--bioc-${{ matrix.config.bioc }}-${{ hashFiles('depends.Rds') }}
        restore-keys: ${{ runner.os }}--bioc-${{ matrix.config.bioc }}-

    - name: Install Linux system dependencies
      if: runner.os == 'Linux'
      env:
        RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
      run: |
        sudo apt-get update && sudo apt-get -y install libharfbuzz-dev libfribidi-dev
        Rscript -e "remotes::install_github('r-hub/sysreqs')"
        sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
        sudo -s eval "$sysreqs"
        
    - name: Install macOS system dependencies
      if: runner.os == 'macOS'
      run: |
        brew install harfbuzz
        brew install fribidi
        
    - name: Install R package dependencies
      run: |
        remotes::install_deps(dependencies = TRUE, repos = c(getOption('repos'), BiocManager::repositories()), Ncpu = 2L)
        remotes::install_cran("rcmdcheck")
      shell: Rscript {0}

    - name: Session info
      run: |
        options(width = 100)
        pkgs <- installed.packages()[, "Package"]
        sessioninfo::session_info(pkgs, include_base = TRUE)
      shell: Rscript {0}

    - name: Build, Install, Check
      uses: grimbough/bioc-actions/build-install-check@v1

    - name: Run BiocCheck
      uses: grimbough/bioc-actions/run-BiocCheck@v1
      with:
        arguments: '--no-check-bioc-views --no-check-bioc-help'
        error-on: 'never'

    - name: Show testthat output
      if: always()
      run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
      shell: bash

    - name: Upload check results
      if: failure()
      uses: actions/upload-artifact@master
      with:
        name: ${{ runner.os }}-bioc${{ matrix.config.bioc }}-results
        path: check

    - name: Test coverage
      if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.config.covr == 'yes'
      run: |
        install.packages("covr")
        covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")
      shell: Rscript {0}

    - name: Deploy
      if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.config.pkgdown == 'yes'
      run: |
        R CMD INSTALL .
        Rscript -e "remotes::install_cran('pkgdown'); pkgdown::deploy_to_branch(new_process = FALSE)"
